<?php

namespace MediaDivision\Gebana\Console\Command;

use Symfony\Component\Console\Command\Command;
use \Magento\Framework\Filesystem\DirectoryList;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputOption;
use Magento\Framework\App\ResourceConnection;
use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory;
use Magento\Store\Model\App\Emulation;
use Magento\Catalog\Model\ProductFactory;

class ImportRedirects extends Command
{

    const DEBUG = "debug";

    private $debug = false;
    private $emulation;
    private $productCollectionFactory;
    private $productFactory;
    private $redirectFile = "/var/import/Gebana Redirects.csv";
    private $redirectFileAt = "/var/import/gebana.at Redirects.csv";
    private $redirectFileDe = "/var/import/gebana.de Redirects.csv";
    private $resource;

    public function __construct(
        DirectoryList $directoryList,
        Emulation $emulation,
        CollectionFactory $productCollectionFactory,
        ProductFactory $productFactory,
        ResourceConnection $resourceConnection,
        $name = null
    ) {
        $this->installDir = $directoryList->getRoot();
        $this->emulation = $emulation;
        $this->productCollectionFactory = $productCollectionFactory;
        $this->productFactory = $productFactory;
        $this->resource = $resourceConnection;
        parent::__construct($name);
    }

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $options = [
            new InputOption(self::DEBUG, "d", InputOption::VALUE_OPTIONAL, "debug")
        ];
        $this->setName("import:redirects")
            ->setDescription("Redirects importieren")->setDefinition($options);
        parent::configure();
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        if ($input->getOption(self::DEBUG)) {
            $this->debug = true;
            echo "\nSetze debug mode.\n\n";
        }

        if ($this->debug) {
            echo "\n\nStarte import:redirects\n\n";
        }
        $state = \Magento\Framework\App\ObjectManager::getInstance()->get('\Magento\Framework\App\State');
        $state->setAreaCode(\Magento\Framework\App\Area::AREA_FRONTEND);
        
        $this->insertRedirectsFromCsv();
        //$this->setProductRedirects();
    }

    private function setProductRedirects()
    {
        // SELECT * FROM `catalog_product_entity_varchar` WHERE attribute_id='202' AND store_id=3 // interner Artikelname
        foreach ($this->productCollectionFactory->create() as $pr) {
            $this->emulation->startEnvironmentEmulation(3, 'adminhtml');
   
            $product = $this->productFactory->create()->load($pr->getId());
            if ($product->getVisibility() == 4) {
                echo $product->getId() . " ";// . $product->getLongProductName() . "\n";
                $urlKey = preg_replace('/[^a-z0-9]/', '-', strtolower($product->getLongProductName()));
                $urlKey = preg_replace('/^-*(.*)-*$/', "$1", $urlKey);
                $urlKey = preg_replace('/^-*(.*)-*$/', "$1", $urlKey);
                $urlKey = preg_replace('/-+/', "-", $urlKey);
                echo $urlKey . "\n";
                try {
                    $product->setUrlKey($urlKey)->save();
                } catch (\Exception $exc) {
                    echo $exc->getMessage() . "\n";
                }
            }
            $this->emulation->stopEnvironmentEmulation();
        }
    }

    private function insertRedirectsFromCsv()
    {
        $write = $this->resource->getConnection();
        if (($ahandle = fopen($this->installDir . $this->redirectFile, "r")) !== false) {
            $head = fgetcsv($ahandle, 0, ";");
            while (($line = fgetcsv($ahandle, 0, ";")) !== false) {
                $data = [];
                foreach ($head as $index => $field) {
                    $data[$field] = $line[$index];
                }
                //print_r($data);
                $entityType = "custom";
                $entityId = 0;
                $requestPath = preg_replace('?.*/shop/?', "", $data["Alte URL"]);
                $targetPath = preg_replace('?.*/shop/de-ch/?', "", $data["Redirect auf"]);
                if (!$targetPath) {
                    $targetPath = "/";
                }

                $redirectType = 301;
                $storeId = 1;
                $isAutogenerated = 0;

                $query = "insert into url_rewrite (entity_type, entity_id, request_path, target_path, redirect_type, store_id, is_autogenerated)"
                        . "VALUES (?,?,?,?,?,?,?)";
                try {
                    $write->query(
                        $query,
                        [
                        $entityType,
                        $entityId,
                        $requestPath,
                        $targetPath,
                        $redirectType,
                        $storeId,
                        $isAutogenerated
                        ]
                    );
                } catch (\Exception $exc) {
                    echo $exc->getMessage() . "\n";
                }

                //print_r($data);
                //echo $data["Link URL"] . " -> " . $data[""] . "\n";
                echo $requestPath . " -> " . $targetPath . "\n";
                //echo $data[""] . "\n";
            }
            fclose($ahandle);
        }
        //        if (($dhandle = fopen($this->installDir . $this->redirectFileDe, "r")) !== FALSE) {
        //            $head = fgetcsv($dhandle, 0, ";");
        //            while (($line = fgetcsv($dhandle, 0, ";")) !== FALSE) {
        //                $data = [];
        //                foreach ($head as $index => $field) {
        //                    $data[$field] = $line[$index];
        //                }
        //                $entityType = "custom";
        //                $entityId = 0;
        //                $requestPath = preg_replace('?.*/shop/?', "", $data["ï»¿Alte URL"]);
        //                $targetPath = preg_replace('?.*/shop/de-de/?', "", $data["Redirect auf"]);
        //                if (!$targetPath) {
        //                    $targetPath = "/";
        //                }
        //                $redirectType = 301;
        //                $storeId = 4;
        //                $isAutogenerated = 0;
        //
        //                $query = "insert into url_rewrite (entity_type, entity_id, request_path, target_path, redirect_type, store_id, is_autogenerated)"
        //                        . "VALUES (?,?,?,?,?,?,?)";
        //                try {
        //                    $write->query($query, [
        //                        $entityType,
        //                        $entityId,
        //                        $requestPath,
        //                        $targetPath,
        //                        $redirectType,
        //                        $storeId,
        //                        $isAutogenerated
        //                    ]);
        //                } catch (\Exception $exc) {
        //                    echo $exc->getMessage() . "\n";
        //                }
        //
        //                //print_r($data);
        //                //echo $data["Link URL"] . " -> " . $data[""] . "\n";
        //                echo $requestPath . " -> " . $targetPath . "\n";
        //                //echo $data[""] . "\n";
        //            }
        //            fclose($dhandle);
        //        }
    }
}
